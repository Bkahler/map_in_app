<body>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script>

var width = 960,
  height = 1160;

var svg = d3.select("body").append("svg")
      .attr("width", width)
      .attr("height", height);

d3.json("uk.json", function(error, uk) {
  // svg.append("path")
  // .datum(topojson.feature(uk, uk.objects.subunits))
  // .attr("d", d3.geo.path().projection(d3.geo.mercator()));

  var subunits = topojson.feature(uk, uk.objects.subunits);
    // mercator is a flat map
  // var projection = d3.geo.mercator() 
  //           .scale(500)
  //           .translate([width/2, height/2]);
  // default values for albers center on the us
  var projection = d3.geo.albers()  
             .center([0, 55.4])
             .rotate([4.4, 0])
             .parallels([50, 60])
             .scale(6000)
             .translate([width/2, height/2]);
  // define paths & projection
  // projection takes 3D world and maps to 2D        
  var path = d3.geo.path()
         .projection(projection);
    // add paths
     svg.append("path")
      .datum(topojson.mesh(uk, uk.objects.subunits, function(a, b) { return a !== b && a.id !== "IRL"; }))
      .attr("d", path)
      .attr("class", "subunit-boundary");
     // color each country using the CSS styles above
     svg.selectAll(".subunit")  
      .data(topojson.feature(uk, uk.objects.subunits).features)
      .enter().append("path")
      .attr("class", function(d) { return "subunit " + d.id; })
      .attr("d", path);
     // add dots
     svg.append("path")
      .datum(topojson.feature(uk, uk.objects.places))
      .attr("r", 10)
      .attr("d", path)
      .attr("fill", "grey")     
      .attr("class", "place");
     // add place labels
     svg.selectAll(".place-label")
      .data(topojson.feature(uk, uk.objects.places).features)
      .enter().append("text")
      .attr("class", "place-label")
      .attr("transform", function(d) { return "translate(" + projection(d.geometry.coordinates) + ")"; })
      .attr("dy", ".35em")
      .text(function(d) { return d.properties.name; });
    // move place labels away from dot
    svg.selectAll(".place-label")
        .attr("x", function(d) { return d.geometry.coordinates[0] > -1 ? 6 : -6; })
        .style("text-anchor", function(d) { return d.geometry.coordinates[0] > -1 ? "start" : "end"; });
      // add country labels
      svg.selectAll(".subunit-label")
        .data(topojson.feature(uk, uk.objects.subunits).features)
        .enter().append("text")
        .attr("class", function(d) { return "subunit-label " + d.id; })
        .attr("transform", function(d) { return "translate(" + path.centroid(d) + ")"; })
        .attr("dy", ".35em")
        .text(function(d) { return d.properties.name; });

      
}); // this closes the original d3.json file opening

   


</script>